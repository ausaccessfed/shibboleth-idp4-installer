<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
                           http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd"
                           
       default-init-method="initialize"
       default-destroy-method="destroy">

    <!-- Use this file to define any custom beans needed globally. -->

    <!--
    Algorithm include/exclude sets that override or merge with library defaults. Normally you can leave these
    empty or commented and use the system defaults, but you can override those defaults using these beans.
    Each <value> element is an algorithm URI; you can also use <util:constant> elements in place of literal values.
    -->
    
    <!--
    <util:set id="shibboleth.IncludedSignatureAlgorithms">
    </util:set>

    <util:set id="shibboleth.ExcludedSignatureAlgorithms">
    </util:set>

    <util:set id="shibboleth.IncludedEncryptionAlgorithms">
    </util:set>

    <util:set id="shibboleth.ExcludedEncryptionAlgorithms">
    </util:set>
    -->

    <!--
    If you need to define and inject custom Java object(s) into the various views used throughout the
    system (errors, login, logout, etc.), you can uncomment and define the bean below to be of any
    type required. It will appear in the view scope as a variable named "custom".
    
    The example below defines the bean as a map, which allows you to inject multiple objects under
    named keys to expand the feature to support multiple injected objects.
    
    You MUST NOT change the bean(s) referenced in this way, they should be treated as read-only from
    wthin views.
    -->
    
    <!--
    <util:map id="shibboleth.CustomViewContext">
        <entry key="foo" value="bar"/>
    </util:map>
    -->

    <bean id="shibboleth.JPAStorageService"
        class="org.opensaml.storage.impl.JPAStorageService"
        p:cleanupInterval="%{idp.storage.cleanupInterval:PT10M}"
        c:factory-ref="shibboleth.JPAStorageService.EntityManagerFactory" />
  
    <bean id="shibboleth.JPAStorageService.EntityManagerFactory"
        class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="persistenceUnitName" value="storageservice" />
        <property name="packagesToScan" value="org.opensaml.storage.impl" />
        <property name="dataSource" ref="shibboleth.JPAStorageService.DataSource" />
        <property name="jpaVendorAdapter" ref="shibboleth.JPAStorageService.JPAVendorAdapter" />
        <property name="jpaDialect">
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaDialect" />
        </property>
    </bean>

    <bean id="shibboleth.JPAStorageService.JPAVendorAdapter"
        class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="database" value="MYSQL" />
    </bean>

    <!-- Two seperate but same Data Sources providing seperate pools of connections that
         will help prevent problems in one component from breaking the other.
    -->
    <!-- For features like consent and Shared Token generation and reterival -->     
    <bean id="shibboleth.JPAStorageService.DataSource"
        class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close" lazy-init="true"
        p:driverClassName="com.mysql.cj.jdbc.Driver"
        p:url="jdbc:mysql://localhost/idp_db?autoReconnect=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=GMT"
        p:username="idp_admin"
        p:password="%{idp.storage.dbpassword}"
        p:maxIdle="5"
        p:maxWaitMillis="15000"
        p:testOnBorrow="true"
        p:validationQuery="select 1"
        p:validationQueryTimeout="5" />
    
    <!-- For creation and reterival of Persistent IDs -->
    <bean id="shibboleth.JPAStorageService.PersistentDataSource"
        class="org.apache.commons.dbcp2.BasicDataSource" destroy-method="close" lazy-init="true"
        p:driverClassName="com.mysql.cj.jdbc.Driver"
        p:url="jdbc:mysql://localhost/idp_db?autoReconnect=true&amp;useLegacyDatetimeCode=false&amp;serverTimezone=GMT"
        p:username="idp_admin"
        p:password="%{idp.storage.dbpassword}"
        p:maxIdle="5"
        p:maxWaitMillis="15000"
        p:testOnBorrow="true"
        p:validationQuery="select 1"
        p:validationQueryTimeout="5" />

</beans>
